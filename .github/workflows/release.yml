name: Deploy release to hosting providers
"on":
  release:
    types: [created]
env:
  NODE_VERSION: "16"
  # NEXT_PUBLIC_ANALYTICS_ID: ${{ secrets.analytics }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: Build
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
        env:
          NEXT_PUBLIC_VERSION: ${{ steps.package-version.outputs.current-version}}

      - run: yarn install --frozen-lockfile
      - run: yarn build

  # TODO: check if pre release is needed
  deploy_to_ipfs:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # TODO: rm one or both of these 
      # use npm version + branch + sha https://github.com/martinbeentjes/npm-get-version-action/blob/main/entrypoint.sh
      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: Deploy to IPFS
        id: ipfs
        uses: aquiladev/ipfs-action@v0.2.1
        with:
          path: ./dist/apps/webapp/exported
          service: pinata
          pinataKey: ${{ secrets.PINATA_KEY }}
          pinataSecret: ${{ secrets.PINATA_SECRET }}
          pinataPinName: effective-adventure-${{ steps.get_version.outputs.version-without-v }}

      - name: Update DNSLink
        id: dnslink
        uses: textileio/cloudflare-update-dnslink@master
        env:
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          RECORD_DOMAIN: "alexpedersen.dev"
          RECORD_NAME: "_dnslink.ipfs-effective-adventure"
        with:
          cid: ${{ steps.ipfs.outputs.cid }}

      - name: Dump vars context
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"
          echo ${{ steps.package-version.outputs.current-version}}
          echo ${{ steps.get_version.outputs.version }}
          echo ${{ steps.get_version.outputs.version-without-v }}
          echo "/ipfs/${{ steps.ipfs.outputs.cid }}"
          echo ${{ steps.ipfs.outputs.url }}

  deploy_to_firebase:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_EFFECTIVE_ADVENTURE }}"
          channelId: live
          projectId: effective-adventure

      - name: Dump vars context
        run: |
          echo "Branch: ${{ steps.vars.outputs.branch }}"
          echo "Sha: ${{ steps.vars.outputs.sha_short }}"
          echo ${{ steps.get_version.outputs.version }}
          echo ${{ steps.get_version.outputs.version-without-v }}
          echo "/ipfs/${{ steps.ipfs.outputs.cid }}"
          echo ${{ steps.ipfs.outputs.url }}
